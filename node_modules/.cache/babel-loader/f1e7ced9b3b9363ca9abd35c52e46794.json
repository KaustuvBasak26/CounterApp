{"ast":null,"code":"import _slicedToArray from \"/home/talentica-all.com/kaustuvb/Documents/ReactCounter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/talentica-all.com/kaustuvb/Documents/ReactCounter/src/counter/counter.js\";\nimport React, { useState } from 'react';\n\nconst Counter = props => {\n  let styles = {\n    height: \"100vh\"\n  };\n\n  let _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  let setCounter = e => {\n    let target = e.target.id;\n\n    if (count !== 10) {\n      if (target === 'increase') {\n        setCount(count = count + 1);\n      } else {\n        setCount(count = count - 1);\n      }\n\n      if (count == 10) {\n        window.alert(\"Max Limit Reached!\");\n      }\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  });\n};\n\nexport default Counter;","map":{"version":3,"sources":["/home/talentica-all.com/kaustuvb/Documents/ReactCounter/src/counter/counter.js"],"names":["React","useState","Counter","props","styles","height","count","setCount","setCounter","e","target","id","window","alert"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAC1B,MAAIC,MAAM,GAAG;AACTC,IAAAA,MAAM,EAAE;AADC,GAAb;;AAD0B,kBAKFJ,QAAQ,CAAC,CAAD,CALN;AAAA;AAAA,MAKrBK,KALqB;AAAA,MAKdC,QALc;;AAQ1B,MAAIC,UAAU,GAAIC,CAAD,IAAO;AACrB,QAAIC,MAAM,GAAGD,CAAC,CAACC,MAAF,CAASC,EAAtB;;AACA,QAAGL,KAAK,KAAG,EAAX,EAAc;AACd,UAAGI,MAAM,KAAK,UAAd,EAAyB;AACtBH,QAAAA,QAAQ,CAACD,KAAK,GAAGA,KAAK,GAAC,CAAf,CAAR;AACF,OAFD,MAEK;AACFC,QAAAA,QAAQ,CAACD,KAAK,GAAGA,KAAK,GAAC,CAAf,CAAR;AACF;;AACD,UAAGA,KAAK,IAAI,EAAZ,EAAe;AACbM,QAAAA,MAAM,CAACC,KAAP,CAAa,oBAAb;AACD;AACJ;AAEC,GAbD;;AAeC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAKD,CA5BD;;AA8BA,eAAeX,OAAf","sourcesContent":["import React, {useState} from 'react';\n\nconst Counter = (props) => {\n let styles = {\n     height: \"100vh\"\n }\n\n let [count, setCount] = useState(0);\n\n\n let setCounter = (e) => {\n    let target = e.target.id;\n    if(count!==10){\n    if(target === 'increase'){\n       setCount(count = count+1)\n    }else{\n       setCount(count = count-1)\n    }\n    if(count == 10){\n      window.alert(\"Max Limit Reached!\")\n    }\n}\n\n }\n\n  return (\n    <div>\n     \n    </div>\n  );\n};\n\nexport default Counter;"]},"metadata":{},"sourceType":"module"}